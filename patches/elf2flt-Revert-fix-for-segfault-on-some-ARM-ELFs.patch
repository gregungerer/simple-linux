From 3dbc48b3e0cf9c6b8efa3b7ecda2fc24dd40d2c1 Mon Sep 17 00:00:00 2001
From: Greg Ungerer <gerg@kernel.org>
Date: Wed, 15 Mar 2023 22:53:23 +1000
Subject: [PATCH 1/3] Revert "elf2flt: fix for segfault on some ARM ELFs"

This reverts commit ba379d08bb78c9300e84351c11080c26ddcc36b3.

This change breaks at least the m68k architecture support. It causes
overlapping text and data sections resulting in errors like this:

    ERROR: text=0x38f34 overlaps data=0x31a74 ?

The underlying cause here is that the .eh_frame section is marked
as readonly relocated data on m68k, resulting in it being treated
now as if it will be loaded into the flat text section. But it
is layed out in the linker script as part of the flat data section.

Signed-of-by: Greg Ungerer <gerg@kernel.org>
---
 elf2flt.c | 25 +++++++------------------
 1 file changed, 7 insertions(+), 18 deletions(-)

diff --git a/elf2flt.c b/elf2flt.c
index 7ac0617..9edbe9b 100644
--- a/elf2flt.c
+++ b/elf2flt.c
@@ -363,7 +363,7 @@ output_relocs (
 #endif
 
 #if 0
-  printf("%s(%d): output_relocs(abs_bfd=%d,symbols=0x%x,number_of_symbols=%d,"
+  printf("%s(%d): output_relocs(abs_bfd=%d,synbols=0x%x,number_of_symbols=%d"
 	"n_relocs=0x%x,text=0x%x,text_len=%d,data=0x%x,data_len=%d)\n",
 	__FILE__, __LINE__, abs_bfd, symbols, number_of_symbols, n_relocs,
 	text, text_len, data, data_len);
@@ -424,8 +424,7 @@ output_relocs (
 	 */
 	if ((!pic_with_got || ALWAYS_RELOC_TEXT) &&
 	    ((a->flags & SEC_CODE) ||
-	    ((a->flags & (SEC_DATA | SEC_READONLY | SEC_RELOC)) ==
-		         (SEC_DATA | SEC_READONLY | SEC_RELOC))))
+	    ((a->flags & (SEC_DATA | SEC_READONLY)) == (SEC_DATA | SEC_READONLY))))
 		sectionp = text + (a->vma - text_vma);
 	else if (a->flags & SEC_DATA)
 		sectionp = data + (a->vma - data_vma);
@@ -1876,9 +1875,7 @@ int main(int argc, char *argv[])
     bfd_size_type sec_size;
     bfd_vma sec_vma;
 
-    if ((s->flags & SEC_CODE) ||
-       ((s->flags & (SEC_DATA | SEC_READONLY | SEC_RELOC)) ==
-                    (SEC_DATA | SEC_READONLY | SEC_RELOC))) {
+    if (s->flags & SEC_CODE) {
       vma = &text_vma;
       len = &text_len;
     } else if (s->flags & SEC_DATA) {
@@ -1911,13 +1908,9 @@ int main(int argc, char *argv[])
   if (verbose)
     printf("TEXT -> vma=0x%x len=0x%x\n", text_vma, text_len);
 
-  /* Read input sections destined for the text output segment.
-   * Includes code sections, but also includes read-only relocation
-   * data sections.*/
+  /* Read in all text sections.  */
   for (s = abs_bfd->sections; s != NULL; s = s->next)
-    if ((s->flags & SEC_CODE) ||
-       ((s->flags & (SEC_DATA | SEC_READONLY | SEC_RELOC)) ==
-                    (SEC_DATA | SEC_READONLY | SEC_RELOC)))
+    if (s->flags & SEC_CODE)
       if (!bfd_get_section_contents(abs_bfd, s,
 				   text + (s->vma - text_vma), 0,
 				   bfd_section_size(abs_bfd, s)))
@@ -1941,13 +1934,9 @@ int main(int argc, char *argv[])
     text_len = data_vma - text_vma;
   }
 
-  /* Read input sections destined for the data output segment.
-   * Includes data sections, but not those read-only relocation
-   * data sections already included in the text output section.*/
+  /* Read in all data sections.  */
   for (s = abs_bfd->sections; s != NULL; s = s->next)
-    if ((s->flags & SEC_DATA) &&
-       ((s->flags & (SEC_READONLY | SEC_RELOC)) !=
-                    (SEC_READONLY | SEC_RELOC)))
+    if (s->flags & SEC_DATA)
       if (!bfd_get_section_contents(abs_bfd, s,
 				   data + (s->vma - data_vma), 0,
 				   bfd_section_size(abs_bfd, s)))
-- 
2.25.1

